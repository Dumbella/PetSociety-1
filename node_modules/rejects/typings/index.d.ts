import * as Redis from 'ioredis';
import Raw, { RawType } from './Raw';
import Reference, { ReferenceType } from './Reference';
export default class Rejects {
    readonly client: Redis.Redis;
    generateID: () => string;
    constructor(client: Redis.Redis);
    delete(key: string): Promise<number>;
    upsert(key: string, obj: object, pipeline?: Redis.Pipeline): PromiseLike<[Error | null, 'OK'][]>;
    protected _upsert(rootKey: string, obj: object, opts: {
        pipeline: Redis.Pipeline;
        seen: any[];
    }): Redis.Pipeline;
    set(key: string, obj: object, pipeline?: Redis.Pipeline): Promise<[Error | null, 'OK'][]>;
    get<T = any>(key: string, opts?: {
        type?: ReferenceType;
        depth?: number;
    }): Promise<T | null>;
    protected _get<T>(rootKey: string, { type, depth, currentDepth }?: {
        type?: ReferenceType;
        depth?: number;
        currentDepth?: number;
    }): Promise<T | null>;
    incr(key: string, amt?: number): PromiseLike<number>;
    keys(key: string): PromiseLike<string[]>;
    size(key: string): PromiseLike<number>;
}
export { Raw, RawType, Reference, ReferenceType, Rejects, };
