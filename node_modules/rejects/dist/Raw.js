"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RawType;
(function (RawType) {
    RawType["STRING"] = "string";
    RawType["NUMBER"] = "number";
    RawType["BOOLEAN"] = "boolean";
    RawType["NULL"] = "null";
    RawType["UNDEFINED"] = "undefined";
    RawType["SYMBOL"] = "symbol";
})(RawType = exports.RawType || (exports.RawType = {}));
const types = ['string', 'number', 'boolean', 'null', 'undefined', 'symbol'];
class Raw extends String {
    static isPrimitive(val) {
        return val === null || !['function', 'object'].includes(typeof val);
    }
    static is(str) {
        return typeof str === 'string' && str.startsWith('raw:');
    }
    constructor(val) {
        let type;
        if (Raw.is(val)) {
            const slice = val.slice(4);
            type = types.find(t => slice.startsWith(t));
            if (!type || !type.length)
                throw new Error(`invalid raw type for value ${val}`);
            super(val);
            val = slice.slice(type.length + 1);
            switch (type) {
                case RawType.BOOLEAN:
                    val = val === 'true' ? true : false;
                    break;
                case RawType.NULL:
                    val = null;
                    break;
                case RawType.NUMBER:
                    val = val.includes('.') ? parseFloat(val) : parseInt(val);
                    break;
                case RawType.SYMBOL:
                    val = Symbol(val);
                    break;
                case RawType.UNDEFINED:
                    val = undefined;
                    break;
                case RawType.STRING:
                    val = String(val);
                    break;
                default:
                    throw new Error(`attempted to derive raw value from invalid type "${type}"`);
            }
        }
        else {
            type = val === null ? 'null' : typeof val;
            super(`raw:${type}:${String(val)}`);
        }
        this.type = type;
        this.value = val;
    }
}
exports.default = Raw;

//# sourceMappingURL=Raw.js.map
